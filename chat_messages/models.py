from django.db import models
from django.contrib.auth.models import User
from django.dispatch import receiver
from django.db.models.signals import post_save
from channels import Group
import json
# from message_channels.settings import MEDIA_URL as medial

# Create your models here.

def file_directory(instance, filename):
	return 'media/chat/user_{0}/attachments/{1}'.format(instance.user.id, filename)

""" A message can have multiple attachments to it """
class Attachment(models.Model):
	file = models.FileField(upload_to = file_directory)
	user = models.ForeignKey(User, related_name = "sent_attachments")


def image_directory(instance, filename):
	return 'media/chat/user_{0}/images/{1}'.format(instance.user.id, filename)

""" A message can have multiple images in it """
class MessageImage(models.Model):
	image = models.ImageField(upload_to = image_directory)
	user = models.ForeignKey(User, related_name = "sent_images")



""" Messages will be generated by sender and recieved by the recipient with data """
class Message(models.Model):
	message = models.TextField()
	files = models.ManyToManyField(Attachment, related_name = "attached_to", blank=True)
	images = models.ManyToManyField(MessageImage, related_name = "related_to", blank=True)
	""" seen field to store if seen or not """
	seen = models.BooleanField(default=False)
	recipient = models.ForeignKey(User, related_name = "recieved_messages")
	sender = models.ForeignKey(User, related_name = "sent_messages")
	timestamp = models.DateTimeField(auto_now=True)

	def __str__(self):
		return (self.recipient.username+": "+self.message)

	def __unicode__(self):
		return __str__(self)



class ChatProfile(models.Model):
	user = models.OneToOneField(User, related_name="chatprofile")
	online = models.BooleanField(default=False)

	def __str__(self):
		return self.user.username+"'s chat profile"

	def __unicode__(self):
		return __str__(self)

	@receiver(post_save, sender=User)
	def create_user_profile(sender, instance, created, **kwargs):
		if created:
			ChatProfile.objects.create(user = instance)

	@receiver(post_save, sender=User)
	def save_user_profile(sender, instance, **kwargs):
		instance.chatprofile.save()


@receiver(post_save, sender=Message)
def save_user_profile(sender, instance, **kwargs):
	Group(instance.recipient.username).send({
	"text": json.dumps({
	    'message' :instance.message,
	    }),
	})
	Group(instance.sender.username).send({
	"text": json.dumps({
	    'message' :instance.message,
	    }),
	})